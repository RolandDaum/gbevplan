// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'objectbox/userdata.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8534368099911846896),
      name: 'OB_userdata',
      lastPropertyId: const obx_int.IdUid(4, 2918228659772616921),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7235091026985548159),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3663184683880720358),
            name: 'kurse',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5507650168535747115),
            name: 'jahrgang',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7149615986414859004),
      name: 'SecureCredentials',
      lastPropertyId: const obx_int.IdUid(4, 5861311358786514126),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 426039764399774966),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5494157337346073939),
            name: 'username',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7013154473524988031),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6899970951739657897),
      name: 'SomeData',
      lastPropertyId: const obx_int.IdUid(2, 5954575908615509399),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6627257845730711729),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5954575908615509399),
            name: 'data',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 6899970951739657897),
      lastIndexId: const obx_int.IdUid(2, 459910422451581845),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [7479950782522453447],
      retiredIndexUids: const [459910422451581845, 6309168706909558555],
      retiredPropertyUids: const [
        1835336981216112114,
        1008345837232804628,
        5861311358786514126,
        2918228659772616921
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    OB_userdata: obx_int.EntityDefinition<OB_userdata>(
        model: _entities[0],
        toOneRelations: (OB_userdata object) => [],
        toManyRelations: (OB_userdata object) => {},
        getId: (OB_userdata object) => object.id,
        setId: (OB_userdata object, int id) {
          object.id = id;
        },
        objectToFB: (OB_userdata object, fb.Builder fbb) {
          final kurseOffset = fbb.writeList(
              object.kurse.map(fbb.writeString).toList(growable: false));
          final jahrgangOffset = fbb.writeString(object.jahrgang);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, kurseOffset);
          fbb.addOffset(2, jahrgangOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OB_userdata()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..kurse = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 6, [])
            ..jahrgang = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '');

          return object;
        }),
    SecureCredentials: obx_int.EntityDefinition<SecureCredentials>(
        model: _entities[1],
        toOneRelations: (SecureCredentials object) => [],
        toManyRelations: (SecureCredentials object) => {},
        getId: (SecureCredentials object) => object.id,
        setId: (SecureCredentials object, int id) {
          object.id = id;
        },
        objectToFB: (SecureCredentials object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SecureCredentials()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..username = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '');

          return object;
        }),
    SomeData: obx_int.EntityDefinition<SomeData>(
        model: _entities[2],
        toOneRelations: (SomeData object) => [],
        toManyRelations: (SomeData object) => {},
        getId: (SomeData object) => object.id,
        setId: (SomeData object, int id) {
          object.id = id;
        },
        objectToFB: (SomeData object, fb.Builder fbb) {
          final dataOffset = fbb.writeString(object.data);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SomeData()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..data = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [OB_userdata] entity fields to define ObjectBox queries.
class OB_userdata_ {
  /// see [OB_userdata.id]
  static final id =
      obx.QueryIntegerProperty<OB_userdata>(_entities[0].properties[0]);

  /// see [OB_userdata.kurse]
  static final kurse =
      obx.QueryStringVectorProperty<OB_userdata>(_entities[0].properties[1]);

  /// see [OB_userdata.jahrgang]
  static final jahrgang =
      obx.QueryStringProperty<OB_userdata>(_entities[0].properties[2]);
}

/// [SecureCredentials] entity fields to define ObjectBox queries.
class SecureCredentials_ {
  /// see [SecureCredentials.id]
  static final id =
      obx.QueryIntegerProperty<SecureCredentials>(_entities[1].properties[0]);

  /// see [SecureCredentials.username]
  static final username =
      obx.QueryStringProperty<SecureCredentials>(_entities[1].properties[1]);

  /// see [SecureCredentials.password]
  static final password =
      obx.QueryStringProperty<SecureCredentials>(_entities[1].properties[2]);
}

/// [SomeData] entity fields to define ObjectBox queries.
class SomeData_ {
  /// see [SomeData.id]
  static final id =
      obx.QueryIntegerProperty<SomeData>(_entities[2].properties[0]);

  /// see [SomeData.data]
  static final data =
      obx.QueryStringProperty<SomeData>(_entities[2].properties[1]);
}
